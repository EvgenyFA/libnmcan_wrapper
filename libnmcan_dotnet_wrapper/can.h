/**	@file can.h
  *	@brief Заголовочный файл. Типы данных и константы
  */

#pragma once

  //режим работы основного контроллера
typedef enum _CTRL_MODE
{
	CAN_NATIVE = 0,
	CAN_FIFO = 1,
	CAN_TIMEPLAN = 2,
	CAN_RSRV = 3
} CTRL_MODE;

//режим работы CAN контроллера
typedef enum _CAN_MODE
{
	CAN_WORK = 0,
	CAN_SLEEP = 1,
	CAN_LOOP = 2,
	CAN_MON = 3,
	CAN_CONF = 4
} CAN_MODE;

//скорость работы CAN контроллера
typedef enum _CAN_SPEED
{
	SPEED_125 = 125,
	SPEED_250 = 250,
	SPEED_500 = 500,
	SPEED_1000 = 1000
} CAN_SPEED;

//информация об устройстве
typedef struct _CAN_device_info {
	WCHAR* device_name; //имя файла устройства
	UINT32 device_status; //не используется
} CAN_device_info, * PCAN_device_info;

typedef struct _CAN_device_list {
	UINT8 count;
	CAN_device_info* device;
} CAN_device_list, * PCAN_device_list;

//скорость контроллера
typedef struct _CAN_IOCTL_SETSPEED_REQ {
	UINT32	can_speed;
	UINT8	channel;
	UINT8	params[3];
} CAN_IOCTL_SETSPEED_REQ, * PCAN_IOCTL_SETSPEED_REQ;

//режим работы контроллера
typedef struct _CAN_IOCTL_SETMODE_REQ {
	UINT8	can_mode;
	UINT8	channel;
} CAN_IOCTL_SETMODE_REQ, * PCAN_IOCTL_SETMODE_REQ;

//доступ к регистрам устройства
typedef struct _BAR_IOCTL_REG_REQ {
	UINT32	reg_addr;	//адрес
	UINT32	buf;		//значение регистра
} BAR_IOCTL_REG_REQ, * PBAR_IOCTL_REG_REQ;

//доступ к регистрам CAN контроллера
typedef struct _CAN_IOCTL_REG_REQ {
	UINT32	reg_addr;		//начальный адрес
	UINT8	channel;		//канал
	UINT8	buf[16];		//буфер со значениями регистров
	UINT8	size;			//количество регистров в запросе
} CAN_IOCTL_REG_REQ, * PCAN_IOCTL_REG_REQ;


//заголовок сообщения
typedef struct _MSG_HDR_CAN
{
	unsigned RXBn : 1;
	unsigned CANn : 1;
	unsigned tmr_div : 14;
	unsigned tmr_ntu : 16;
} MSG_HDR_CAN;

//блок данных в буфере приёма
typedef struct _DMA_SLOT_CAN
{
	MSG_HDR_CAN hdr;
	UINT8 RXBnCTRL;
	UINT8 RXBnSIDH;
	UINT8 RXBnSIDL;
	UINT8 RXBnEID8;
	UINT8 RXBnEID0;
	UINT8 RXBnDLC;
	UINT8 RXBnD[8];
	unsigned : 8;
	UINT8 epoch;
} DMA_SLOT_CAN;

#define DMA_STR_MAXSIZE 1024
//структура данных для запроса буфера приёма
typedef struct _DMA_STR_CAN
{
	UINT32       number_block;		//максимальное количество блоков данных
	UINT32       number_channel;		//номер канала
	UINT32       timeout;				//таймаут
	DMA_SLOT_CAN buf[DMA_STR_MAXSIZE];       //буфер с данными
} DMA_STR_CAN;

//регистр управления буфером отправки
typedef union _TXBCTRL
{
	struct
	{
		unsigned TXP : 2;
		unsigned : 1;
		unsigned TXREQ : 1;
		unsigned TXERR : 1;
		unsigned MLOA : 1;
		unsigned ABTF : 1;
		unsigned : 1;
	} bits;
	UINT8 byte;
} TXBCTRL;


typedef struct _CAN_SEND_DATA
{
	UINT8  nChannel;		//канал
	UINT8  nBufNumber;	//номер буфера
	UINT8  nPriority;		//приоритет
	TXBCTRL  txb_ctrl;	//регистр TXBCTRL
	UINT32 timeout;		//таймаут отправки
	UINT32 SID;			//стандартный идентификатор
	UINT32 EID;			//расширенный идентификатор
	UINT8  nData[8];		//данные сообщения
	UINT32 nSize;			//количество байт данных сообщения
} CAN_SEND_DATA;

// receive buffer operating mode
typedef enum _RXB_MODE
{
	RXB_MODE_ALL = 0,
	RXB_MODE_SID = 1,
	RXB_MODE_EID = 2,
	RXB_MODE_OFF = 3,
	RXB_MODE_NUM
} RXB_MODE;

typedef struct _CAN_IOCTL_DMA_READ_REQ {
	UINT8 channel;
	UINT32 count;
} CAN_IOCTL_DMA_READ_REQ, * PCAN_IOCTL_DMA_READ_REQ;

typedef struct _CAN_DEVINFO {
	UINT32 device_id;			//pci device id
	UINT32 vendor_id;			//pci vendor id
	UINT8  revision_id;			//pci revision id
	WCHAR  device_name[255];	//путь к устройству
	UINT32 irq;					//вектор прерываний
	UINT64 dma_buffer_size;		//размер буфера DMA
	LARGE_INTEGER dma_addr_device;	//физический адрес буфера DMA
	UINT64 dma_addr_driver;				//логический адрес буфера DMA
	LARGE_INTEGER bar_addr_device;	//физический адрес BAR0
	UINT64 bar_addr_driver;				//логический адрес BAR0
	BOOLEAN			 mem_is_port;
	BOOLEAN isFifoAvailable;	/** флаг доступности FIFO */
	BOOLEAN	isTtcan;			/** флаг доступности функционала ttcan */
	BOOLEAN isOnlyUpdate;		/** флаг работы только в режиме обновления */
} CAN_DEVINFO, * PCAN_DEVINFO;

typedef struct _CAN_DRVINFO {
	UINT32 version;		//версия
	UINT32 build_date;	//дата сборки
} CAN_DRVINFO, * PCAN_DRVINFO;

typedef struct _CAN_FIFO_REQUEST
{
	UINT8 channel;
	UINT32 sid;
	UINT32 eid;
	UINT8 dlc;
	UINT8 data[8];
	UINT32 size;
	UINT8 msgid; //id сообщения
	UINT8 isHPFIFO; //использовать буфер с высоким приоритетом
} CAN_FIFO_REQUEST, * PCAN_FIFO_REQUEST;

typedef struct _CAN_MASKS {
	UINT8	channel;
	UINT8	rxb_mode;
	UINT8	filter;
	UINT8	ident;
	UINT32	id_mask;
	UINT32	id_filter;
} CAN_MASKS, * PCAN_MASKS;

typedef struct _CAN_TIMER_TRSH {
	UINT8	channel;
	UINT8	bEpoch;
	UINT8	nEpochBits;
	UINT32	nEpoch;
	UINT32	nValue;
} CAN_TIMER_TRSH, * PCAN_TIMER_TRSH;

typedef struct _CAN_TIMEOUTS {
	UINT8	channel;
	UINT32	interval;
	UINT32	absolute;
} CAN_TIMEOUTS, * PCAN_TIMEOUTS;

typedef struct _CAN_SEND_DATA_NOW {
	UINT8	channel;
	UINT8	nBuf;
	UINT32	timeout;
	TXBCTRL txb_ctrl;
} CAN_SEND_DATA_NOW, * PCAN_SEND_DATA_NOW;

typedef struct _SEND_DATA_TG
{
	UINT8	nChannel;
	UINT8	nBuf;
	UINT8	bEpoch;
	UINT32	nEpoch;
	UINT32	nTrigger;
} SEND_DATA_TG, * PSEND_DATA_TG;

typedef struct _CAN_ERROR_INFO {
	UINT8	channel;
	UINT8	nEFLG;
	UINT8	nTEC;
	UINT8	nREC;
} CAN_ERROR_INFO, * PCAN_ERROR_INFO;

typedef struct _CAN_CANXSTAT {
	UINT8 channel;
	UINT8 reset;
	UINT32 cnt_tx;
	UINT32 cnt_rx;
	UINT32 cnt_err_tx;
	UINT32 cnt_err_rx;
	UINT32 cnt_err_ovf_tx;
	UINT32 cnt_err_abt;
	UINT32 cnt_err_boff;
	UINT32 cnt_err_ep;
	UINT32 cnt_err_ovf_rx;
	UINT32 cnt_err_wrn;
} CAN_CANXSTAT, * PCAN_CANXSTAT;

#define IOCTL_READ_BAR							CTL_CODE(FILE_DEVICE_CONTROLLER, 0x100, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define	IOCTL_WRITE_BAR							CTL_CODE(FILE_DEVICE_CONTROLLER, 0x101, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_READ_CAN							CTL_CODE(FILE_DEVICE_CONTROLLER, 0x102, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_WRITE_CAN							CTL_CODE(FILE_DEVICE_CONTROLLER, 0x103, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_MODIFY_CAN						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x104, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_DEBUG								CTL_CODE(FILE_DEVICE_CONTROLLER, 0x105, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_DUMP								CTL_CODE(FILE_DEVICE_CONTROLLER, 0x106, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_BLANK								CTL_CODE(FILE_DEVICE_CONTROLLER, 0x107, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_DEVICE_VERSION					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x108, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_DRIVER_VERSION					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x109, METHOD_BUFFERED, FILE_ANY_ACCESS) 

#define IOCTL_READ_DMA_BUF						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x200, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_WRITE_TXBUF						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x300, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_WRITE_TXBUF_AND_SEND				CTL_CODE(FILE_DEVICE_CONTROLLER, 0x301, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_SEND_FROM_TXBUF					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x302, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_CHECK_TX							CTL_CODE(FILE_DEVICE_CONTROLLER, 0x303, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_WAIT_FOR_TX						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x304, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_REMOVE_TXREQ						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x305, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_ABAT								CTL_CODE(FILE_DEVICE_CONTROLLER, 0x306, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define	IOCTL_SEND_BY_TRIGGER					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x307, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define	IOCTL_SEND_BY_TRIGGER_LOOP				CTL_CODE(FILE_DEVICE_CONTROLLER, 0x308, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define	IOCTL_CHECK_TRIGGER						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x309, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define	IOCTL_WRITE_DATA_FIFO					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x310, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_WRITE_TG_FIFO						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x311, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_RESET_CAN						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x500, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_RESET_CANn_CAN					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x501, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_SETSPEED							CTL_CODE(FILE_DEVICE_CONTROLLER, 0x502, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_GETSPEED							CTL_CODE(FILE_DEVICE_CONTROLLER, 0x503, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_SETSPEED_PARAMS					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x504, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_SETMODE							CTL_CODE(FILE_DEVICE_CONTROLLER, 0x505, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_GETMODE							CTL_CODE(FILE_DEVICE_CONTROLLER, 0x506, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_DMA_ENABLE						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x507, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_DMA_DISABLE						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x508, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_SET_ONESHOT						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x509, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_GET_CAN_ERRORS					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x50A, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_SET_CAN_MASKS						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x50B, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_GET_CAN_MASKS						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x50C, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define IOCTL_SET_CAN_TIMER_TRSH				CTL_CODE(FILE_DEVICE_CONTROLLER, 0x50D, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define IOCTL_SET_CAN_TIMER_CEED				CTL_CODE(FILE_DEVICE_CONTROLLER, 0x50E, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define IOCTL_SET_CAN_TIMER_FREE				CTL_CODE(FILE_DEVICE_CONTROLLER, 0x50F, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define IOCTL_SET_CAN_TIMER_RST_RXB				CTL_CODE(FILE_DEVICE_CONTROLLER, 0x510, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define IOCTL_STOP_CAN_TIMER					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x511, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define	IOCTL_GET_CAN_TIMER						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x512, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define IOCTL_START_TIMER_INT					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x513, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define IOCTL_STOP_TIMER_INT					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x514, METHOD_BUFFERED, FILE_ANY_ACCESS) 
//#define IOCTL_WAIT_TIMER_INT					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x515, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_SET_CAN_TIMEOUT					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x516, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define	IOCTL_SET_DEVICEMODE					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x517, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_GET_FIFOINFO						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x518, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_SET_TXPAUSE						CTL_CODE(FILE_DEVICE_CONTROLLER, 0x519, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_SET_FIFO_TIMEOUT					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x51A, METHOD_BUFFERED, FILE_ANY_ACCESS) 
#define IOCTL_GET_CANX_STATS					CTL_CODE(FILE_DEVICE_CONTROLLER, 0x51B, METHOD_BUFFERED, FILE_ANY_ACCESS) 

DEFINE_GUID(GUID_DEVINTERFACE_CAN, 0x3BD2B180, 0xD211, 0x4D88, 0x8F, 0x46, 0xB7, 0x38, 0x45, 0xCF, 0x38, 0xF9);